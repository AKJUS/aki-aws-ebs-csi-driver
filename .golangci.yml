# Copyright 2024 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the 'License');
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an 'AS IS' BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

run:
  modules-download-mode: readonly
issues:
  exclude-rules:
    # gosec recommends ignoring test files
    - path: (.+)_test.go
      linters:
        - gosec
    - path: tests/e2e
      linters:
        - gosec
linters-settings:
  revive:
    rules:
      # Using += 1 instead of ++ is fine
      - name: increment-decrement
        disabled: true
  stylecheck:
    # Dot importing ginkgo and gomega is standard practice
    dot-import-whitelist:
      - "github.com/onsi/gomega"
      - "github.com/onsi/ginkgo/v2"
linters:
  enable:
    - asasalint
    - asciicheck
    - bidichk
    - bodyclose
    - canonicalheader
    - containedctx
    - contextcheck
    - copyloopvar
    - decorder
    - dogsled
    - dupword
    - durationcheck
    - errcheck
    - errchkjson
    - errname
    - errorlint
    - exhaustive
    - fatcontext
    - forbidigo
    - forcetypeassert
    - gci
    - ginkgolinter
    - gocheckcompilerdirectives
    - gochecksumtype
    - gocritic
    - gofmt
    - goheader
    - goimports
    - gomodguard
    - goprintffuncname
    - gosimple
    - gosmopolitan
    - grouper
    - importas
    - inamedparam
    - ineffassign
    - intrange
    - loggercheck
    - makezero
    - mirror
    - misspell
    - musttag
    - nakedret
    - nilerr
    - nilnil
    - noctx
    - nolintlint
    - nosprintfhostport
    - prealloc
    - predeclared
    - promlinter
    - protogetter
    - reassign
    - rowserrcheck
    - sloglint
    - spancheck
    - sqlclosecheck
    - staticcheck
    - stylecheck
    - tagalign
    - tagliatelle
    - tenv
    - testableexamples
    - testifylint
    - thelper
    - tparallel
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - wastedassign
    - whitespace
    - zerologlint
    - goconst
    - gochecknoinits
    - perfsprint
    - revive
    - gosec
    - godot # End all godoc comments with period
  disable:
    - govet # We already run with `make verify/govet`
    # We do not use
    - gomoddirectives # We need `replace` in `go.mod`
    - depguard # We don't guard against dependencies
    - testpackage # Require separate test package to catch leaky unexported dependencies
    - funlen # Long func names happen
    - varnamelen # Long var names happen
    - maintidx # Maintainability index
    - cyclop # Cyclomatic complexity
    - gocognit # Cognitive complexity
    - wsl # Too strict of a whitespace linter
    # TODO Investigate FIXME
    - err113 # TODO FIXME do not create errors dynamically from scratch. Instead wrap static (package-level) error. 2 points
    - wrapcheck # TODO ^^
    - gochecknoglobals  # TODO FIXME A whole 2 point task on its own
    - paralleltest # TODO FIXME (Too many tests that aren't parallelized right now, probably half a day to attempt to mark the ones we can)
    - nestif # TODO whole refactoring/readability task, should split up
    - godox # TODO FIXME audit our project TODOs
    # TODO Q: Consult with team
    - lll # Limit line length
    - gofumpt # Rely on gofumpt's stricter formatting opinions
    - ireturn # Always accept interfaces return concrete types (gopherism)
    - nlreturn # Always have emptyline before return
    - nonamedreturns # No using named returns in functions. Maybe nolint a few of the places it actually leads to cleaner code
    - exhaustruct # Forces you to explicitly instantiate all structs. REALLY painful for kubernetes structs...
    - interfacebloat # Cloud and Mounter have 15 methods instead of linter's recommended 10... Smell or necessary? We can nolint specific ones
    - mnd # Magic Number Detection. Many false positives, still worth with nolint?
    - gomnd # Many false positives, still worth with nolint?
    - dupl # Tracks code duplication. Brutal amount of duplication in tests. False positives in non-tests.
